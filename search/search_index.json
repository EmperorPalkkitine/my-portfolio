{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hi, I'm Seth Palkki \ud83d\udc4b","text":"<p>Welcome to my portfolio. I'm an electrical engineer and Army veteran with hands-on experience in power systems, software coding, and data integration. This site houses my resume, a curated list of projects, and links to my social media pages.</p>"},{"location":"#highlights","title":"Highlights","text":"<ul> <li>\ud83c\udf93 BSE Electrical Engineering (Magna Cum Laude)<ul> <li>\u26a1Concentration in Electrical Power &amp; Energy Systems</li> </ul> </li> <li>\ud83c\udf93 MSE Electrical Engineering Student (projected to graduate May 2026)<ul> <li>\u26a1 Focus in Mixed Signal Circuit Design</li> </ul> </li> <li>\ud83d\udd23 Software Languages<ul> <li>Python (Flask/RESTful API)</li> <li>mySQL</li> <li>Java</li> <li>Dart (Flutter mobile app)</li> <li>Relay Ladder Logic (RLL)</li> <li>Arduino</li> </ul> </li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Resume</li> <li>Projects</li> <li>LinkedIn</li> <li>GitHub</li> </ul>"},{"location":"resume/","title":"Resume","text":"<ul> <li>Download a copy of my resume here (PDF)</li> </ul> <p>You can also view my resume in a preview below:</p>"},{"location":"socialmedia/","title":"Social Media Links","text":"<p>LinkedIn</p> <p>GitHub</p>"},{"location":"projects/","title":"Projects","text":"<ul> <li>GridScout \u2014 Mobile front end + RESTful API backend system for utility grid mapping and AWS S3 updates. Python, Flutter (Dart), Flask, MySQL, AWS S3, OpenDSS.</li> <li>Hot Dog Vending Machine \u2014 Industrial assembly line style design project utilizing an Allen-Bradley MicroLogix 1000 series controller. Relay Ladder Logic (RLL), Low Voltage Wiring.</li> <li>Project Sprout \u2014 Drone swarm concept project where five different robots work cohesively to aid farmers with crop planting and maintenance to reduce greenhous gas emmission from farms and assist in the national farming labor shortage. Arduino, AutoCAD.</li> </ul>"},{"location":"projects/GridScout/","title":"Grid Scout","text":"<p>Stack: Python, Flask, MySQL, Dart via Flutter Role: Full Stack Developer with emphasis on the back-end  Dates: 2024\u20132025 Repos: Back-end, Front-end</p>"},{"location":"projects/GridScout/#summary","title":"Summary","text":"<p>GridScout is a smart data collection and model creation tool for electric power distribution systems that allows for rapid in-field distribution network modeling during equipment installation and maintenance via a mobile device application operated by technicians and other utility personnel. GridScout addresses the substantial need for utilities to efficiently manage the rapid growth of distributed energy resources (DERs) and aging grid infrastructure. As utilities shift towards smarter, more adaptive networks, existing processes for data collection and model updates are no longer sufficient. Overall functionality of the application is achieved through means of cellular assisted geolocation, development of an equipment/component database and integration to the distribution simulator software, OpenDSS.</p>"},{"location":"projects/GridScout/#screenshots-media","title":"Screenshots / Media","text":"<p> Screenshot of one of the input pages for the mobile application.</p>"},{"location":"projects/GridScout/#key-features","title":"Key Features","text":"<ul> <li>End-users are able to scan a QR code that will automatically fill out text input fields for ease of use</li> <li>Back-end coding does the heavy lifting by deciding whether the equipment installation is a replacement or new install based on data in the mySQL database</li> <li>AWS S3 file is automatically updated when technician finishes the job on the mobile application, providing simulation engineers by the minute up to date info on the equipment in the grid</li> </ul>"},{"location":"projects/GridScout/#technical-notes","title":"Technical Notes","text":"<ul> <li>Flask RESTful API coded in Python communicates with the Dart front-end, the mySQL database, and the AWS S3 bucket</li> <li>With the exception of the AWS S3 bucket, all other development was done completely free of cost and open source</li> </ul>"},{"location":"projects/GridScout/#what-i-learned","title":"What I learned","text":"<ul> <li>Build it the way people actually work. Making \u201creplace\u201d vs \u201cadd new\u201d match real work orders made the app easier to use.</li> <li>QR codes are fast, but still need double-checks. Using the first letter to guess the part type is handy, but the server must verify it.</li> <li>Changes should be all-or-nothing. When I update the database and the grid file, they should both succeed\u2014or neither\u2014so things don\u2019t get out of sync.</li> <li>Save versions before editing. Keeping backups of the grid model (like save points) makes it easy to undo mistakes.</li> <li>Show only the fields that matter. The form changes based on the part type, so techs don\u2019t see a bunch of useless boxes.</li> <li>Validate in the app and on the server. Catch bad numbers or missing info early to avoid bad data going in.</li> <li>Keep a change history. Logging \u201cwho changed what\u201d turns debugging into a quick look-up instead of a guessing game.</li> <li>Use plain names. Buttons and endpoints that say \u201cReplace component\u201d or \u201cAdd component\u201d are clearer than clever labels.</li> <li>Plan for weak signal. Small local caching and quick feedback make the app usable when the connection is spotty.</li> <li>Run small checks before shipping. A quick lint/test run catches breakages early.</li> <li>Write short how-tos. A one-page guide like \u201cHow to add a new part type\u201d saves time later.</li> </ul>"},{"location":"projects/ProjectSprout/","title":"Project Sprout","text":"<p>Software: Arduino Coding, AutoCAD Role: Lead Developer for Mobile Energy Robot (PETE) Dates: 2021</p>"},{"location":"projects/ProjectSprout/#summary","title":"Summary","text":"<p>One of the biggest challenges facing our global society today is the ever-increasing need for food and the immense strain, it puts on the agricultural industry. Project Sprout is an attempt at developing a solution to help farmers grow their crops and disperse labor more efficiently. There are a few problems that farmers and growers face today that automation can help solve. Project Sprout aims to aid food production through a drone swarm that will help with watering, plant and soil nutrition, pest and animal deterrent, soil temperature regulation, and frost management. Throughout this design process, third-party stakeholders have been excluded to ensure the design is made solely by engineers for growers.</p>"},{"location":"projects/ProjectSprout/#screenshots-media","title":"Screenshots / Media","text":"<p>Link to design explanation video</p>"},{"location":"projects/ProjectSprout/#key-features","title":"Key Features","text":"<ul> <li>4 individual robots that interact and work together as a drone swarm</li> <li>PETE offers a mobile charging platform for the other drones in the swarm</li> <li>Designed to be affordable and repairable by the end-user (no proprietary hardware or software)</li> </ul>"},{"location":"projects/ProjectSprout/#technical-notes","title":"Technical Notes","text":"<ul> <li>Restricted to a budget of $1000 per drone and a weight limit of 400lbs per drone.</li> <li>Deployable folding solar panels utilized on a telescopic pole to reach above crops.</li> <li>Coded on Arduino utilizing multiple inputs and outputs for total autonomy.</li> </ul>"},{"location":"projects/ProjectSprout/#what-i-learned","title":"What I learned","text":"<ul> <li>Basics of coding of both AutoCAD and Arduino coding </li> <li>Collaboration with teammates was a must and was done all online</li> <li>Project scope and management including design requirements was a heavily emphasized</li> </ul>"},{"location":"projects/VendingMachine/","title":"Hot Dog Vending Machine","text":"<p>Software: Relay Ladder Logic (RLL) Role: Sole Developer Dates: 2021  </p> <p>Problem. Build an unattended vending machine that prepares a hot dog to order with basic customization, using a low-cost PLC while keeping the process safe and repeatable.</p> <p>Approach.</p> <ul> <li>Ladder-logic state machine (Idle \u2192 Order \u2192 Prep/Heat \u2192 Dispense \u2192 Toppings \u2192 Eject \u2192 Fault/Recovery)</li> <li>I/O map for actuators (feed/valves) and sensors (limits/guards/temperature-ready)</li> <li>Parameterized options (portion times, topping enable bits) to avoid hard-coding</li> <li>Safety interlocks, timeout-based jam detection, and E-stop</li> <li>Bench testing with simulated I/O to validate sequencing and restart behavior</li> </ul> <p>Outcome.</p> <ul> <li>Working prototype that reliably sequences prep \u2192 dispense \u2192 toppings based on user selections</li> </ul>"},{"location":"projects/project-template/","title":"Project Title","text":"<p>Stack: Python, Flask, MySQL Role: Lead developer Dates: 2024\u20132025 Repo: </p>"},{"location":"projects/project-template/#summary","title":"Summary","text":"<p>One paragraph that explains the problem, your approach, and the outcome.</p>"},{"location":"projects/project-template/#screenshots-media","title":"Screenshots / Media","text":"<p>Add images to <code>docs/assets/</code> and embed like: <pre><code>![screenshot](../assets/your-image.png)\n</code></pre></p>"},{"location":"projects/project-template/#key-features","title":"Key Features","text":"<ul> <li>Feature 1</li> <li>Feature 2</li> <li>Feature 3</li> </ul>"},{"location":"projects/project-template/#technical-notes","title":"Technical Notes","text":"<ul> <li>Interesting design decisions</li> <li>Performance or reliability considerations</li> <li>Any math/EE details</li> </ul>"},{"location":"projects/project-template/#what-i-learned","title":"What I learned","text":"<p>Bullet points or short paragraph.</p>"}]}